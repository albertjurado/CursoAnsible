# Este es mi fichero de playbook
--- # Crear un nuevo play
# Contra quien opero
- hosts: ubuntu01 # Se puede poner la ip o hostname o poner all y cojera todos los hosts del fichero inventario1.yml

# Opciones de conexion
  remote_user: root
  order: inventory # reverse_inventory | sorted | reverse-sorted | shuffle

# Ansible va ejecutando los tasks de manera secuencial pero en paralelo sobre diferentes entornos
# Por defecto lo hace de 5 en 5
    
# Variables TODO
  vars:
        variable1: Hola amigo!!
        variable2: 22
        variable3:
            subvalor1: 1
            subvalor2: 2
    
# Comienza la difinicion de las tareas
  tasks:

    # Comienza UNA tarea
    - name: Mi primera tarea
      debug:
            # Si quiero usar variables, uso doble llave y el texto entre comillas
            msg: "{{ variable1 }} voy a comenzar una tarea"    # Comienza UNA tarea
    
    # Comienza OTRA tarea       
    - name: Mi segunda tarea
      debug:
            # !unsafe  evita que un texto se procese por JINJA !
    
    # Comienza OTRA tarea       
    - name: Mi tercera tarea
      debug:
            msg: "{{ variable1 }} voy a comenzar la tarea {{ numerotarea }}, en el servidor {{ sistema }} {{ sistema2 }}"
      # Puedo definir variables a nivel de tareas
      vars:
            numerotarea: 3
        
    # Comienza OTRA tarea con variables de diccionario    
    - name: Mi cuarta tarea
      debug:
            # el > te permite escribir el mensaje de salida en varias lineas. 
            msg: >  
                "Valores del diccionario {{ variable3.subvalor1 }}"
                "Valores del diccionario {{ variable3.subvalor2 }}"
                
    # Comienza una tarea para obtener los facts  
    - name: Mi tarea de facts
      debug:
            msg: "He entrado !!!"
    #   var: ansible_facts.dns.nameservers[0]
    #   var: ansible_facts.distribution['dns'].nameservers[0]
    
    # when: ansible_facts.distribution == 'Ubuntu' and variable2 == 22           Es lo mismo pero en una linea todo
      when:  # Esta sintaxis es un AND encubierto
        - ansible_facts.distribution == 'Ubuntu'
        - variable2 == 22
    
      # Una tarea normalita  
    - name: Mi tarea normalita
      debug:
            msg: "Me ejecuto normalmente"
      changed_when: False
      notify: tarea opcional
      
      # Una tarea normalita 2
    - name: Mi tarea normalita 2
      debug:
            msg: "Me ejecuto normalmente 2"
      changed_when: True
      notify: mievento

     # Una tarea que explota
    - name: Mi tarea explosiva
      shell:
            cmd: umane
      ignore_errors: True
      failed_when: explosiva.rc > 200
      register: explosiva
  
       # Una tarea normalita
    - name: Otra tarea
      debug:
            msg: "{{ explosiva.stdout }}"
      when: explosiva.rc == 0
      
### Expresiones para utilizar en los when: when, failed_when, changed_when
#
#   Expresiones sobre tareas que se han ejecutado
#       explosiva is failed
#       explosiva is succeded
#       explosiva is skippped
#       explosiva is changed
#
#   Otras explresiones utiles sobre variables (incluyendo tareas que se hayan ejecutado):
#       mivariable is defined
#       mivariable is undefined or mivariable == False
    
  
      
         # Una tarea comprobadora
    - name: Una tarea que comprueba un texto
      debug:
            msg: La salida de error de la tarea explosiva continene 'not found'
      #when: "'not found' in explosiva.stderr" 
      #when: "'found' not in explosiva.stderr" 
      #when: explosiva.stderr is match(".*not.*")       # con expresiones regulares
      #Regex:                                           MIRAR HTTPS://REGEX101.COM
      # ^ Comienzo de texto
      # $ Final de texto
      when: explosiva.stderr is search("n.t f..nd")
   
   # Nuestra primera tarea en bucle!!
   
    - name: Primer bucle
      debug:
            msg: "Ahora voy a hacer algo con el puerto: {{ item }} "
      loop: "{{ puertos }}"
      vars:
        puertos:
            - 80
            - 81
            - 83

    - name: Lista procesadores
      debug:
            msg: "Ahora voy a hacer una lista con los procesadores: {{ item }} "
      loop: "{{ ansible_facts.processor }}"
      loop_control:
        index_var: procesador
      when: (procesador+1) % 3 == 0
     
      
##################################################################################################################################
# Filtros jinja2
#
# abs, attr, batch, capitalize, center, default, dictsort, escape, filesizeformat, first, float, forceescape, format, 
# groupby, indent, int, join, last, length, list, lower, map, max, min, pprint, random, reject, rejectattr, replace, 
# reverse, round, safe, select, selectattr, slice, sort, string, striptags, sum, title, tojson, trim, truncate, unique, 
# upper, urlencode, urlize, wordcount, wordwrap, xmlattr
#
# Uso {{ variable | upper }}
#
# https://jinja.palletsprojects.com/en/2.11.x/templates/#builtin-filters
 
        
####################################################################################################################################        
        
        
# Variables dentro de loops
# ansible_loop.allitems       La lista de todos los elementos en el bucle
# ansible_loop.index          La iteración actual del bucle. (comenzando en 1)
# ansible_loop.index0         La iteración actual del bucle. (comenzando en 0)
# ansible_loop.revindex       El número de iteraciones hasta acabar el bucle (comenzando en 1)
# ansible_loop.revindex0      El número de iteraciones hasta acabar el bucle (comenzando en 0)
# ansible_loop.first          Verdadero si es la primera iteración
# ansible_loop.last           Verdadero si es la última iteración
# ansible_loop.length         El número de elementos en el bucle
# ansible_loop.previtem       El elemento de la iteración anterior del bucle. Indefinido durante la primera iteración.
# ansible_loop.nextitem       El elemento de la siguiente iteración del bucle. Indefinido durante la última iteración.

#####################################################################################################################################   
    
    
    
      
      
      
  handlers:
        #Una tarea opcional
        - name: tarea opcional
          debug:
                msg: "Me ejecuto opcionalmente"
          listen: mievento  
                
        #Una tarea opcional 2 
        - name: tarea opcional 2
          debug:
                msg: "Me ejecuto opcionalmente 2"
          listen: mievento